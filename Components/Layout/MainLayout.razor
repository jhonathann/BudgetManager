@inherits LayoutComponentBase
@using BudgetManager.Classes
@using BudgetManager.Components.HelperOverlays

<div class="colorPalette page">
    <div class="sidebar @SideBarClass">
        <NavMenu/>
        <div class="hideOrShowBar" @onclick=ToggleNavMenu>
            @if (SideBarClass == "showSideBar")
            {
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z"/></svg>
            }
            else
            {
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"/></svg>
            }
        </div>
    </div>
    <main>
        @Body
    </main>
    @if (showInformation)
    {
        <InformationWindow Toggle=@ToggleInformationWindow Title=@InformationTitle Message=@InformationMessage
            AskForConfirmation=@InformationAskForConfirmation Continue=@InformationContinue Cancel=@InformationCancel />
    }
    @if (showInput)
    {
        <InputValueWindow Toggle="@ToggleInputWindow" Title="@InputTitle" InputType=@InputType Placeholder=@InputPlaceHolder
            SubmitAction=@InputSubmitAction RequireDate=@InputRequireDate/>
    }
</div>
@code {
    // Variables to control the information window
    private static bool showInformation = false;
    private static string InformationTitle { get; set; } = "Error";
    private static string InformationMessage { get; set; } = "Message";
    private static bool InformationAskForConfirmation { get; set; } = false;
    private static Action? InformationContinue { get; set; } = null;
    private static Action? InformationCancel { get; set; } = null;
    // Variables to control the input window
    private static bool showInput = false;
    private static string InputTitle { get; set; } = "";
    private static string InputType { get; set; } = "";
    private static string InputPlaceHolder { get; set; } = "";
    private static Action<InputParameters>? InputSubmitAction { get; set; }

    private static bool InputRequireDate { get; set; } = false;
    // CSS class to show/ hide the NavBar in lower screen sizes
    private static string SideBarClass = "showSideBar";
    /// <summary>
    /// Delegate used to encapsulate the statehaschanged method to be able to use it statically
    /// </summary>
    public static Action? Rerender { get; set; }
    /// <summary>
    /// Displays a pop-up with the information
    /// </summary>
    /// <param name="title">The Title of the window</param>
    /// <param name="message">The mesasage of the window</param>
    /// <param name="askForConfirmation">Do you want the user to confirm an action?</param>
    /// <param name="continueAction">Action if the user confirms</param>
    /// <param name="cancelAction">Action if the user doesn't confirm</param>
    public static void DisplayInformationWindow(string title, string message, bool askForConfirmation = false, Action?
    continueAction = null, Action? cancelAction = null)
    {
        InformationMessage = message;
        InformationTitle = title;
        InformationAskForConfirmation = askForConfirmation;
        InformationContinue = continueAction;
        InformationCancel = cancelAction;
        ToggleInformationWindow();
    }
    /// <summary>
    /// Displays a pop-up and ask the user to fill a form
    /// </summary>
    /// <param name="title">The title of the window</param>
    /// <param name="type">The type of the form field that will appear(must be a valid html type)</param>
    /// <param name="placeholder">The placeholder for the field</param>
    /// <param name="submitAction">The accion to be performed (it recieves the value of the user input)</param>
    /// <param name="requireDate">If the input requires also requires a date</param>
    public static void DisplayInputValueWindow(string title, string type, string placeholder, Action<InputParameters>? submitAction,bool requireDate=false)
    {
        InputTitle = title;
        InputType = type;
        InputPlaceHolder = placeholder;
        InputSubmitAction = submitAction;
        InputRequireDate = requireDate;
        ToggleInputWindow();
    }
    private static void ToggleInformationWindow()
    {
        showInformation = !showInformation;
        Rerender?.Invoke(); //Needed when a child invokes this method to rerender the page
    }
    private static void ToggleInputWindow()
    {
        showInput = !showInput;
        Rerender?.Invoke(); //Needed when a child invokes this method to rerender the page
    }

    private static void ToggleNavMenu()
    {
        SideBarClass = SideBarClass == "showSideBar" ? "hideSideBar" : "showSideBar";
    }
    protected override void OnInitialized()
    {
        /*Populates the delegate with the StateHasChanged method, necessary to be able to use the StateHasChanged method
        statically*/
        Rerender = () => StateHasChanged();
    }
}